import pytestimport globimport functions as fcimport data as dtimport numpy as np#from numpy import testingdef pytest_generate_tests(metafunc):    """Generating parameters for tests"""    if "fileName" in metafunc.fixturenames:        filelist = glob.glob('test-files/*.xyz')        metafunc.parametrize("fileName", filelist )    if "angle" in metafunc.fixturenames:        metafunc.parametrize('angle', [np.array([-700000., 5., 0.2]),                                            np.array([-7., -89., 67.])])    @pytest.fixture  def retreive_data(fileName):    """Get data from .xyz files"""    data = np.genfromtxt(fileName, skip_header=2, dtype='str')    el = data[:,0]    a = data[:,1].astype(float)    b = data[:,2].astype(float)    c = data[:,3].astype(float)    return(el, a, b, c)# @pytest.fixture# def angle_in_radians(angle):# angle_test = dt.angle_rad(angle)  #     return(angle_test)@pytest.mark.parametrize('modnt', [np.array([2., 7., 20.]),                                    np.array([-10., 70000., 0.])])def test_trasla(retreive_data, modnt):    '''Checking that trasla actually translates'''    el, a, b, c = retreive_data        a_test = a+modnt[0]    b_test = b+modnt[1]    c_test = c+modnt[2]    #print('DATAAAAA test' , a_test, b_test, c_test)        a_tr, b_tr, c_tr = fc.trasla(a, b, c, modnt)        #print('DATAAAAA trasl', a_tr, b_tr, c_tr)        np.testing.assert_array_almost_equal(a_test, a_tr)    np.testing.assert_array_almost_equal(b_test, b_tr)    np.testing.assert_array_almost_equal(c_test, c_tr)    #@pytest.mark.parametrize('angle', [np.array([2., 7., 20.]),                                   # np.array([-10., 70000., 0.])])def test_angle_rad(angle):    ''' Checking that the function angle_rad transforms the angles into radians'''            angle_test=np.zeros(len(angle))    for i in range(len(angle)):        angle_test[i] = angle[i]*np.pi/180            dt.angle_rad(angle)            np.testing.assert_array_almost_equal(angle, angle_test)def # def test_angle_deg(angle, angle_in_radians):    #     angle_test = angle_in_radians    #     for i in range(len(angle_test)):#         angle_test[i] *= 180/np.pi    #     np.testing.assert_array_almost_equal(angle_test, angle)# @pytest.mark.parametrize('modnr', [np.array([2., 7., 20.]), #                                    np.array([-10., 70000., 0.])])# @pytest.mark.parametrize('var', )# def test_ruota(retreive_data, modnr, var)        