import pytestimport globimport functions as fcimport data as dtimport numpy as npimport CustomError as CEimport hypothesis.extra.numpy from hypothesis import given, strategies as st############################################################################   GENERATING DATA   ######################################################################################def pytest_generate_tests(metafunc):    """Generating parameters for tests       Returns: List of .xyz test files    """        if "fileName" in metafunc.fixturenames:        filelist = glob.glob('test-files/*.xyz')        metafunc.parametrize("fileName", filelist )         @pytest.fixture  def retreive_data(fileName):    """Get data from .xyz files"""    data = np.genfromtxt(fileName, skip_header=2, dtype='str')    el = data[:,0]    a = data[:,1].astype(float)    b = data[:,2].astype(float)    c = data[:,3].astype(float)    return(el, a, b, c)def angle_given(func):    """Generates given hypotesis fixture for angle       Returns: 3x1 numpy array angles in degrees (0,360)    """    angle=hypothesis.extra.numpy.arrays(float, 3, elements=st.floats(0, 360))    return given(angle)(func)def cell_given(func):    """Generates given hypotesis fixture for cell vectors and angles       Returns: 2 3x1 numpy array --> angles (1, 180°)                                  --> cell vectors (1, 100) units    """    cell_vec=hypothesis.extra.numpy.arrays(float, 3, elements=st.floats(1, 100))    cell_ang=hypothesis.extra.numpy.arrays(float, 3, elements=st.floats(1, 180))    return given(cell_vec, cell_ang)(func)############################################################################   PERFORMING TESTS   #####################################################################################@pytest.mark.parametrize('modnt', [np.array([0., 0., 0.])])def test_trasla_null(retreive_data, modnt):    """     GIVEN: Test .xyz files with atomic coordinates with null translation        WHEN: Function trasla is applied        THEN: The coordinates do not change        """        # GIVEN        el_test, a_test, b_test, c_test = retreive_data        #WHEN        a_out, b_out, c_out = fc.trasla(a_test, b_test, c_test, modnt)        #THEN        np.testing.assert_array_almost_equal(a_out, a_test)    np.testing.assert_array_almost_equal(b_out, b_test)    np.testing.assert_array_almost_equal(c_out, c_test)    @pytest.mark.parametrize('modnr', [np.array([0., 0., 0.])])@pytest.mark.parametrize('var', [True, False])def test_ruota_null(retreive_data, modnr, var):    """     GIVEN: Test .xyz files with atomic coordinates with null rotation        WHEN: Function ruota is applied        THEN: The coordinates do not change        """        # GIVEN        el_test, a_test, b_test, c_test = retreive_data        #WHEN        a_out, b_out, c_out = fc.ruota(a_test, b_test, c_test, modnr, var)        #THEN        np.testing.assert_array_almost_equal(a_out, a_test)    np.testing.assert_array_almost_equal(b_out, b_test)    np.testing.assert_array_almost_equal(c_out, c_test)    @cell_given@pytest.mark.parametrize('modnre', [np.array([1, 1, 1])])def test_replica_null(retreive_data, modnre, cell_vec, cell_ang):    """     GIVEN: Test .xyz files with atomic coordinates with null replication        WHEN: Function replica is applied        THEN: The coordinates do not change        """        # GIVEN        angle_rad = dt.angle_rad(cell_ang)    el_test, a_test, b_test, c_test = retreive_data        #WHEN        el_out, a_out, b_out, c_out = fc.replica(el_test, a_test, b_test, c_test, modnre, cell_vec, angle_rad)        #THEN        np.testing.assert_array_almost_equal(a_out, a_test)    np.testing.assert_array_almost_equal(b_out, b_test)    np.testing.assert_array_almost_equal(c_out, c_test)            @angle_givendef test_angle_deg(angle):    """     GIVEN: 3x1 array of angles in degrees        WHEN: Function angle_rad is applied and reverted        THEN: 3x1 array of angles in degrees        """        # GIVEN        angle_test = angle        # WHEN        angle_out = dt.angle_rad(angle)    for i in range(len(angle)):        angle_out[i] *= 180/np.pi            # THEN        np.testing.assert_array_almost_equal(angle_out, angle_test)@angle_givendef test_r_matrix(angle):    """     GIVEN: 3x1 array of angles in degrees        WHEN: Function r_matrix is applied         THEN: 3 rotation matrices of the form of 3x3 arrays        """        # WHEN        R1, R2, R3 = fc.r_matrix(angle)        # THEN        assert R1.shape == (3,3)    assert R2.shape == (3,3)    assert R3.shape == (3,3)    @pytest.mark.parametrize('cell_vec', [np.array([1., 1., 1.])]) @pytest.mark.parametrize('cell_ang', [np.array([90., 45., 90.])])def test_monoclinic_cell_1(cell_vec, cell_ang):    """    GIVEN: Unit cell angles for a monoclinic cell β ≠ α = γ = 90°, a= b = c = 1        WHEN: Function cell is applied        THEN: Monoclinic cell vectors are generated        """    # GIVEN            angle_rad = dt.angle_rad(cell_ang)            # WHEN            cell_vec_x_out, cell_vec_y_out, cell_vec_z_out = fc.cell(cell_vec, angle_rad)    # THEN    cell_vec_x_test = np.array([1., 0., 0.])    cell_vec_y_test = np.array([0., 1., 0.])    cell_vec_z_test = np.array([np.cos(angle_rad[1]), 0.,(1+(np.cos(angle_rad[1]))**2)**(1/2)])            np.testing.assert_array_almost_equal(cell_vec_x_out, cell_vec_x_test)    np.testing.assert_array_almost_equal(cell_vec_y_out, cell_vec_y_test)    np.testing.assert_array_almost_equal(cell_vec_z_out, cell_vec_z_test)@pytest.mark.parametrize('cell_vec', [np.array([1., 1., 1.])]) @pytest.mark.parametrize('cell_ang', [np.array([45., 90., 90.])])def test_monoclinic_cell_2(cell_vec, cell_ang):        """    GIVEN: Unit cell angles for a monoclinic cell α ≠ β = γ = 90°, a= b = c = 1        WHEN: Function cell is applied        THEN: Monoclinic cell vectors are generated        """    # GIVEN            angle_rad = dt.angle_rad(cell_ang)            # WHEN            cell_vec_x_out, cell_vec_y_out, cell_vec_z_out = fc.cell(cell_vec, angle_rad)    # THEN    cell_vec_x_test = np.array([1, 0., 0.])    cell_vec_y_test = np.array([0., 1, 0.])    cell_vec_z_test = np.array([0., np.cos(angle_rad[0]), (1-(np.cos(angle_rad[0]))**2)**(0.5)])            np.testing.assert_array_almost_equal(cell_vec_x_out, cell_vec_x_test)    np.testing.assert_array_almost_equal(cell_vec_y_out, cell_vec_y_test)    np.testing.assert_array_almost_equal(cell_vec_z_out, cell_vec_z_test)        @pytest.mark.parametrize('cell_vec', [np.array([1., 1., 1.])]) @pytest.mark.parametrize('cell_ang', [np.array([90., 90., 45.])])    def test_monoclinic_cell_3(cell_vec,cell_ang):    """    GIVEN: Unit cell angles for a monoclinic cell γ ≠ β = α = 90°, a= b = c = 1        WHEN: Function cell is applied        THEN: Monoclinic cell vectors are generated        """        # GIVEN            angle_rad = dt.angle_rad(cell_ang)            # WHEN            cell_vec_x_out, cell_vec_y_out, cell_vec_z_out = fc.cell(cell_vec, angle_rad)    # THEN    cell_vec_x_test = np.array([1, 0., 0.])    cell_vec_y_test = np.array([np.cos(angle_rad[2]), np.sin(angle_rad[2]), 0.])    cell_vec_z_test = np.array([0., 0., (1+(np.cos(angle_rad[2]))**2)**(0.5)/np.sin(angle_rad[2])])            np.testing.assert_array_almost_equal(cell_vec_x_out, cell_vec_x_test)    np.testing.assert_array_almost_equal(cell_vec_y_out, cell_vec_y_test)    np.testing.assert_array_almost_equal(cell_vec_z_out, cell_vec_z_test)                 