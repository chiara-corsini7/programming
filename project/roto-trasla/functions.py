#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Wed Mar  9 16:50:00 2022@author: chiaracorsini"""import numpy as npdata = np.genfromtxt('CO2.xyz', skip_header=1, dtype='str')print(data)def trasla (a, b, c, modnt):    """This function translates the initial coordinates of the wanted amount.            Parameters:        a, b, c : x, y, z initial coordinates        modnt : array containing x, y and z displacements            Returns:        translated coordinates        """    print("I'm translating")    a += modnt[0]    b += modnt[1]    c += modnt[2]        return a, b, c    def r_matrix (modnr):     """This function creates the x, y, z rotation matrices from rotation angles            Parameters:        modnt : array containing x, y and z rotation angles            Returns:        x, y and z rotation matrices        """     R1 = np.zeros((3,3))    R2 = np.zeros((3,3))    R3 = np.zeros((3,3))    R1[0,:] = [1,0,0]    R1[1,:] = [0,np.cos(modnr[0]),-np.sin(modnr[0])]    R1[2,:] = [0,np.sin(modnr[0]),np.cos(modnr[0])]    R2[0,:] = [np.cos(modnr[1]),0,np.sin(modnr[1])]    R2[1,:] = [0,1,0]    R2[2,:] = [-np.sin(modnr[1]),0,np.cos(modnr[1])]    R3[0,:] = [np.cos(modnr[2]),-np.sin(modnr[2]),0]    R3[1,:] = [np.sin(modnr[2]),np.cos(modnr[2]),0]    R3[2,:] = [0,0,1]        return R1, R2, R3def ruota (a, b, c, modnr):    """This function rotates the initial coordinates of the wanted amount       and relocates the coordinate for a free molecule            Parameters:        a, b, c : x, y ,z initial coordinates        modnr : array containing x, y and z rotation angles                    Returns:        rotated coordinates        """            a_iniz=a.copy()    b_iniz=b.copy()    c_iniz=c.copy()        a0=np.mean(a_iniz)    b0=np.mean(b_iniz)    c0=np.mean(c_iniz)      R1, R2, R3 = r_matrix(modnr)    for j in range(len(a)):        x = [a[j],b[j],c[j]]                Rxy = np.dot(R1, R2)        Rxyz = np.dot(Rxy, R3)        x_rot= np.dot(Rxyz, x)                a[j] = x_rot[0]        b[j] = x_rot[1]        c[j] = x_rot[2]                                a1=np.mean(a)        b1=np.mean(b)        c1=np.mean(c)        a = a - (a1-a0)        b = b - (b1-b0)        c = c - (c1-c0)                          return a, b, c            